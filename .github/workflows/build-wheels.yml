name: Build and Release dlib Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-x86_64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13', '3.14']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake libboost-all-dev libopenblas-dev liblapack-dev \
            libx11-dev libgtk-3-dev libavcodec-dev libavformat-dev libswscale-dev \
            libv4l-dev libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
            libatlas-base-dev gfortran

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools auditwheel patchelf

      - name: Clone dlib
        run: |
          git clone https://github.com/davisking/dlib.git dlib_src
          cd dlib_src
          git checkout v19.24

      - name: Build wheel
        run: |
          cd dlib_src
          python setup.py bdist_wheel

      - name: Repair wheel (manylinux)
        run: |
          cd dlib_src
          auditwheel repair dist/*.whl -w dist_repaired/ || cp dist/*.whl dist_repaired/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dlib-py${{ matrix.python-version }}-linux-x86_64
          path: dlib_src/dist_repaired/*.whl
          retention-days: 30

  build-aarch64:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13', '3.14']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheel in Docker
        run: |
          docker run --rm --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            quay.io/pypa/manylinux2014_aarch64 \
            bash -c "
              export PYTHON_VERSION=${{ matrix.python-version }}
              
              # Install system dependencies
              yum install -y \
                cmake3 boost-devel openblas-devel lapack-devel \
                libX11-devel gtk3-devel \
                libpng-devel libjpeg-devel libtiff-devel wget git
              
              # Set up Python
              if [ \"\$PYTHON_VERSION\" = \"3.11\" ]; then
                PYBIN=/opt/python/cp311-cp311/bin
              elif [ \"\$PYTHON_VERSION\" = \"3.12\" ]; then
                PYBIN=/opt/python/cp312-cp312/bin
              elif [ \"\$PYTHON_VERSION\" = \"3.13\" ]; then
                PYBIN=/opt/python/cp313-cp313/bin
              elif [ \"\$PYTHON_VERSION\" = \"3.14\" ]; then
                PYBIN=/opt/python/cp314-cp314/bin
              fi
              
              \$PYBIN/pip install --upgrade pip wheel setuptools
              
              # Clone and build dlib
              git clone https://github.com/davisking/dlib.git dlib_src
              cd dlib_src
              git checkout v19.24
              \$PYBIN/python setup.py bdist_wheel
              
              # Repair wheel
              auditwheel repair dist/*.whl -w /workspace/dist_final/
            "

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dlib-py${{ matrix.python-version }}-linux-aarch64
          path: dist_final/*.whl
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: [build-x86_64, build-aarch64]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare wheels
        run: |
          mkdir -p wheels
          find artifacts -name "*.whl" -exec cp {} wheels/ \;
          ls -lh wheels/

      - name: Upload Python 3.12 wheels to repo root
        if: github.ref_name
        run: |
          # Find Python 3.12 wheels and prepare them for repo root
          mkdir -p repo_wheels
          find artifacts -name "*cp312*" -exec cp {} repo_wheels/ \;
          echo "Python 3.12 wheels prepared for repo root:"
          ls -lh repo_wheels/
          
          # Create a commit with the wheels in repo root
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Copy wheels to workspace root
          cp repo_wheels/*.whl ./
          
          # Add and commit the wheels
          git add *.whl
          git commit -m "Add Python 3.12 wheels to repo root for direct download" || echo "No changes to commit"
          
          # Push to repository
          git push origin HEAD:main || echo "Failed to push wheels to repo root"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            prebuilt dlib wheels for linux (x86_64 and aarch64) on python 3.11, 3.12, 3.13, and 3.14
            
            **installation:**
            ```bash
            pip install dlib-*.whl
            ```
            
            choose the wheel that matches your:
            - python version (cp311, cp312, cp313, or cp314)
            - architecture (x86_64 or aarch64)
            
            **python 3.12 wheels also available in repo root for direct download**
          files: wheels/*.whl
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}